apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: catapp-build-and-deploy
spec:
  params:
    - name: URL
      description: The repository url to build and deploy.
    - name: REVISION
      description: The revision to build and deploy.
    - name: NAMESPACE
      description: The namespace is used by OpenShift's internal image registry to store the built image.
    - name: DEPLOYMENT
      description: Name of the Deployment and the container name in the Deployment.
    - name: SERVICE_ACCOUNT
      description: The ServiceAccount under which to run the Pipeline.
    - name: pullRequestUrl
    - name: gitRepository
    - name: labels
      description: List of labels currently on the Pull Request

  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: catapp-build-and-deploy-
      spec:
        serviceAccountName: $(params.SERVICE_ACCOUNT)
        pipelineRef:
          name: build-and-deploy-openshift
        resources:
          - name: source
            resourceSpec:
              type: git
              params:
                - name: revision
                  value: $(params.REVISION)
                - name: url
                  value: $(params.URL)
          - name: image
            resourceSpec:
              type: image
              params:
                - name: url
                  value: image-registry.openshift-image-registry.svc:5000/$(params.NAMESPACE)/catapp:$(params.REVISION)

        kind: TaskRun
        metadata:
          name: check-pr-labels-$(uid)
          annotations:
            tekton.dev/gitURL: "$(tt.params.gitRepository)"
          labels:
            prow.k8s.io/build-id: $(tt.params.buildUUID)
            tekton.dev/check-name: check-pr-has-kind-label
            tekton.dev/kind: ci
            tekton.dev/pr-number: $(tt.params.pullRequestNumber)
        spec:
          taskSpec:
            resources:
              inputs:
                - name: source
                  type: git
                - name: pr
                  type: pullRequest
              outputs:
                - name: pr
                  type: pullRequest
            params:
              - name: labels
                description: The labels attached to the Pull Request
              - name: gitRepository
                description: The URL of the git repository
              - name: pullRequestUrl
                description: The URL of the Pull Request
            volumes:
              - name: label-config-v2
                configMap:
                  name: label-config-v2
            steps:
              - name: copy-pr-to-output
                image: busybox
                script: |
                  #!/bin/sh
                  mkdir -p $(outputs.resources.pr.path)
                  cp -r $(inputs.resources.pr.path)/* $(outputs.resources.pr.path)/
              - name: install-pyyaml
                image: python:3-alpine
                script: |
                  pip install pyyaml --user
              - name: check-labels
                image: python:3-alpine
                volumeMounts:
                  - name: label-config-v2
                    mountPath: /etc/config
                script: |
                  #!/usr/bin/env python

                  import json
                  import yaml
                  import sys

                  prLabelsText = """$(params.labels)"""
                  prLabels = json.loads(prLabelsText)
                  labelNames = list(map(lambda e: e["name"], prLabels))
                  kindLabels = list(filter(lambda e: "kind" in e, labelNames))

                  availableLabels = None
                  with open("/etc/config/labels.yaml", "r") as stream:
                    availableLabels = yaml.safe_load(stream)["default"]["labels"]

                  availableKindLabels = list(filter(lambda e: "kind/" in e["name"], availableLabels))
                  availableKindNamesAndDescriptions = map(lambda e: "`" +str(e["name"])+ "`" + ":  " + str(e["description"]), availableKindLabels)

                  comment_template=""
                  if (len(kindLabels) > 1 or len(kindLabels) == 0):
                    comment_template += """
                  **This PR cannot be merged:** expecting exactly one kind/ label

                  <details>

                  Available `kind/` labels are:

                  """

                    for i in availableKindNamesAndDescriptions:
                      comment_template += i + "\n"

                    comment_template += """

                  </details>
                  """
                    new_comment_path = "$(outputs.resources.pr.path)/comments/new.json"
                    comment_body = dict(body=comment_template)
                    with open(new_comment_path, "w") as comment:
                      json.dump(comment_body, comment)

                    # Check failed. Return exit code 1.
                    sys.exit(1)
          resources:
            inputs:
              - name: source
                resourceSpec:
                  type: git
                  params:
                    - name: revision
                      value: master
                    - name: url
                      value: $(params.gitRepository)
              - name: pr
                resourceSpec:
                  type: pullRequest
                  params:
                    - name: url
                      value: $(params.pullRequestUrl)
                  secrets:
                    - fieldName: authToken
                      secretName: bot-token-github
                      secretKey: bot-token
            outputs:
              - name: pr
                resourceSpec:
                  type: pullRequest
                  params:
                    - name: url
                      value: $(params.pullRequestUrl)
                  secrets:
                    - fieldName: authToken
                      secretName: bot-token-github
                      secretKey: bot-token
            params:
              - name: DEPLOYMENT
                value: $(params.DEPLOYMENT)
              - name: pullRequestUrl
                value: $(tt.params.pullRequestUrl)
              - name: gitRepository
                value: $(tt.params.gitRepository)

---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: catapp-build-and-deploy
spec:
  params:
    - name: URL
      value: $(body.repository.clone_url)
    - name: REVISION
      value: $(body.pull_request.head.sha)
    - name: NAMESPACE
      value: esvirskiy
    - name: DEPLOYMENT
      value: catapp
    - name: SERVICE_ACCOUNT
      value: catapp
    - name: pullRequestUrl
      value: $(body.pull_request.html_url)
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: catapp
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: catapp
rules:
  # Permissions for every EventListener deployment to function
  - apiGroups: ["triggers.tekton.dev"]
    resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  # Permissions to create resources in associated TriggerTemplates
  - apiGroups: ["tekton.dev"]
    resources: ["pipelineruns"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: catapp
subjects:
  - kind: ServiceAccount
    name: catapp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: catapp
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: catapp
spec:
  serviceAccountName: catapp
  triggers:
    - name: pullrequest-build-and-deploy
      template:
        name: catapp-build-and-deploy
      bindings:
        - name: catapp-build-and-deploy
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    eventlistener: catapp
  name: el-catapp
spec:
  port:
    targetPort: http-listener
  to:
    kind: Service
    name: el-catapp
